{"version":3,"sources":["components/main-navigation/MainNavigation.module.css","components/movie-details/MovieDetails.module.css","components/movies-list/MoviesList.module.css","components/movies-list/filters/Filters.module.css","components/UI/Modal.module.css","components/main-navigation/search-input/SearchInput.module.css","components/movies-list/Movie.module.css","components/UI/LoadingSpinner.module.css","api/api.js","hooks/useHttp.js","components/UI/LoadingSpinner.js","components/UI/Modal.js","components/movie-details/MovieDetails.js","components/main-navigation/search-input/SearchInput.js","components/main-navigation/MainNavigation.js","components/movies-list/Movie.js","assets/icons/down-arrow.svg","components/movies-list/filters/Filters.js","components/movies-list/MoviesList.js","assets/images/main-background.jpg","App.js","index.js"],"names":["module","exports","config","useHttp","useState","isLoading","setIsLoading","error","setError","fetchData","useCallback","url","applyData","fetch","then","response","json","data","catch","err","LoadingSpinner","className","classes","loader","Backdrop","props","backdrop","onClick","ModalOverlay","modalClasses","modal","children","Modal","overlays","document","getElementById","createPortal","onClose","MovieDetails","id","type","setData","useEffect","getMediaUrl","message","msg","resolution","path","poster_path","title","name","tagline","overview","genres","release_date","production_companies","runtime","revenue","vote_average","first_air_date","number_of_seasons","number_of_episodes","src","width","alt","info","map","genre","company","SearchInput","displayType","placeholderText","userInput","setUserInput","autocomplete","setAutocomplete","selectedMovie","setSelectedMovie","selectMovieHandler","typeVal","timer","setTimeout","trim","length","input","getAutocompleteUrl","results","autoObj","filter","result","media_type","slice","clearTimeout","placeholder","value","onChange","event","target","obj","bind","MainNavigation","onChangeType","mediaType","inputPlaceholder","nav","underline","memo","Movie","onShowDetails","btn","genresArr","Filters","selectedGenreId","onSearchGenre","showFilters","setShowFilters","prevState","arrowIcon","rotate","filters","selected","MoviesList","moviesList","onFetchMore","isFetching","loading","genreId","onSelectGenre","showDetailsHandler","searchGenderHandler","section","list","movie","initialState","mediaElements","nextPage","mediaReducer","state","action","App","useReducer","mediaState","dispatch","selectTypeHandler","selectGenreHandler","fetchMoviesHandler","pageNum","pagePath","genrePath","getMediaUrlByGenre","mediaArray","setMediaElements","mainBackground","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.e55ee4b0.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"top-bar\":\"MainNavigation_top-bar__33niE\",\"nav\":\"MainNavigation_nav__3NDoE\",\"underline\":\"MainNavigation_underline__dAYH8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"movie-container\":\"MovieDetails_movie-container__1JNRI\",\"info\":\"MovieDetails_info__G_UDI\",\"info-sections\":\"MovieDetails_info-sections__NB2Gh\",\"message\":\"MovieDetails_message__3NIMB\",\"msg\":\"MovieDetails_msg__jpLPp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"section\":\"MoviesList_section__1uIV3\",\"list\":\"MoviesList_list__2Jvt8\",\"load-btn\":\"MoviesList_load-btn__BfPzU\",\"msg\":\"MoviesList_msg__2n6jS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"show-genres\":\"Filters_show-genres__1XKdY\",\"rotate\":\"Filters_rotate__2J_5Y\",\"filters\":\"Filters_filters__3zsL-\",\"selected\":\"Filters_selected__35Maa\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"backdrop\":\"Modal_backdrop__1VYmU\",\"modal\":\"Modal_modal__1wNAK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"SearchInput_input__GRqrF\",\"auto-box\":\"SearchInput_auto-box__ro14I\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"movie-item\":\"Movie_movie-item__2KnKO\",\"btn\":\"Movie_btn__1q6Cd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loader\":\"LoadingSpinner_loader__3ER_Y\",\"load8\":\"LoadingSpinner_load8__35q7l\"};","export const config = {\r\n  url: 'https://api.themoviedb.org/3',\r\n  apiKey: '282f63039879e23307f585741fbb6e92',\r\n};\r\n\r\nexport const getImgUrl = (resolution, path) => {\r\n  return `https://image.tmdb.org/t/p/w${resolution}/${path}`;\r\n};\r\n\r\nexport const getTrendingUrl = (type) => {\r\n  const url = `${config.url}/trending/${type}/week?api_key=${config.apiKey}`;\r\n  return url;\r\n};\r\n\r\nexport const getMediaUrl = (type, id) => {\r\n  return `${config.url}/${type}/${id}?api_key=${config.apiKey}`;\r\n};\r\n\r\nexport const getAutocompleteUrl = (type, input) => {\r\n  return `${config.url}/search/${type}?api_key=${config.apiKey}&query=${input}`;\r\n};\r\n\r\nexport const getMediaUrlByGenre = (type, genreId, pageNum) => {\r\n  const pagePath = pageNum ? `&page=${pageNum}` : '&page=1';\r\n  const genrePath = genreId ? `&with_genres=${genreId}` : '';\r\n  return `${config.url}/discover/${type}?api_key=${config.apiKey}${genrePath}${pagePath}`;\r\n};\r\n","import { useCallback, useState } from 'react';\r\n\r\nconst useHttp = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  const fetchData = useCallback((url, applyData) => {\r\n    setIsLoading(true);\r\n    setError(null);\r\n\r\n    fetch(url)\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        setIsLoading(false);\r\n        applyData(data);\r\n      })\r\n      .catch((err) => {\r\n        setIsLoading(false);\r\n        setError(err);\r\n      });\r\n  }, []);\r\n\r\n  return {\r\n    fetchData,\r\n    isLoading,\r\n    error,\r\n    setIsLoading,\r\n  };\r\n};\r\n\r\nexport default useHttp;\r\n","import classes from './LoadingSpinner.module.css'\r\n\r\nconst LoadingSpinner = () => {\r\n  return <div className={classes.loader}></div>\r\n}\r\n\r\nexport default LoadingSpinner;","import { createPortal } from 'react-dom';\r\nimport { Fragment } from 'react/cjs/react.production.min';\r\nimport classes from './Modal.module.css';\r\n\r\nconst Backdrop = (props) => {\r\n  return <div className={classes.backdrop} onClick={props.onClick}></div>;\r\n};\r\n\r\nconst ModalOverlay = (props) => {\r\n  const modalClasses = `${classes.modal} ${\r\n    props.className ? props.className : ''\r\n  }`;\r\n\r\n  return <div className={modalClasses}>{props.children}</div>;\r\n};\r\n\r\nconst Modal = (props) => {\r\n  const overlays = document.getElementById('overlays');\r\n  return (\r\n    <Fragment>\r\n      {createPortal(<Backdrop onClick={props.onClose} />, overlays)}\r\n      {createPortal(\r\n        <ModalOverlay className={props.className}>\r\n          {props.children}\r\n        </ModalOverlay>,\r\n        overlays\r\n      )}\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Modal;\r\n","import { Fragment, useState, useEffect } from 'react';\r\nimport { getImgUrl, getMediaUrl } from '../../api/api';\r\nimport useHttp from '../../hooks/useHttp';\r\nimport LoadingSpinner from '../UI/LoadingSpinner';\r\nimport Modal from '../UI/Modal';\r\n\r\nimport classes from './MovieDetails.module.css';\r\n\r\nconst MovieDetails = ({ id, type, onClose }) => {\r\n  const { fetchData, isLoading, error } = useHttp();\r\n  const [data, setData] = useState(null);\r\n\r\n  useEffect(() => {\r\n    fetchData(getMediaUrl(type, id), (data) => {\r\n      setData(data);\r\n    });\r\n  }, [id, type, fetchData]);\r\n\r\n  if (!data || isLoading || error) {\r\n    return (\r\n      <Modal className={classes.message} onClose={onClose}>\r\n        {!error && <LoadingSpinner />}\r\n        {error && <p className={classes.msg}>Movie could not be found</p>}\r\n      </Modal>\r\n    );\r\n  }\r\n\r\n  const {\r\n    poster_path,\r\n    title,\r\n    name,\r\n    tagline,\r\n    overview,\r\n    genres,\r\n    release_date,\r\n    production_companies,\r\n    runtime,\r\n    revenue,\r\n    vote_average,\r\n    first_air_date,\r\n    number_of_seasons,\r\n    number_of_episodes,\r\n  } = data;\r\n\r\n  return (\r\n    <Modal onClose={onClose} className={classes['movie-container']}>\r\n      <img\r\n        src={getImgUrl(500, poster_path)}\r\n        width='370px'\r\n        alt={title ? title : name}\r\n      />\r\n\r\n      <div className={classes.info}>\r\n        <h2>{title ? title : name}</h2>\r\n        <h3>{tagline}</h3>\r\n        <p>{overview}</p>\r\n\r\n        {genres && <span>{genres.map((genre) => genre.name + ' ')}</span>}\r\n        {production_companies && (\r\n          <span>\r\n            {production_companies.map((company) => company.name + ' ')}\r\n          </span>\r\n        )}\r\n\r\n        <div className={classes['info-sections']}>\r\n          <div>\r\n            {title ? 'Original Release' : 'First air date'}\r\n            <span>{title ? release_date : first_air_date}</span>\r\n          </div>\r\n\r\n          {title && (\r\n            <Fragment>\r\n              <div>\r\n                Running Time: <span>{runtime} minutes</span>\r\n              </div>\r\n              <div>\r\n                Box Office: $<span>{revenue === 0 ? '--' : revenue}</span>\r\n              </div>\r\n            </Fragment>\r\n          )}\r\n          {name && (\r\n            <Fragment>\r\n              <div>\r\n                Number of seasons: <span>{number_of_seasons}</span>\r\n              </div>\r\n              <div>\r\n                Number of episodes: <span>{number_of_episodes}</span>\r\n              </div>\r\n            </Fragment>\r\n          )}\r\n\r\n          <div>\r\n            Vote average: <span>{vote_average}</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default MovieDetails;\r\n","import { Fragment, useEffect, useState } from 'react';\r\nimport { getAutocompleteUrl } from '../../../api/api';\r\nimport useHttp from '../../../hooks/useHttp';\r\nimport MovieDetails from '../../movie-details/MovieDetails';\r\nimport classes from './SearchInput.module.css';\r\n\r\nconst SearchInput = ({ displayType, placeholderText }) => {\r\n  const { fetchData, isLoading, setIsLoading } = useHttp();\r\n\r\n  const [userInput, setUserInput] = useState('');\r\n  const [autocomplete, setAutocomplete] = useState([]);\r\n  const [selectedMovie, setSelectedMovie] = useState(null);\r\n\r\n  const inputChangeHandler = (event) => setUserInput(event.target.value);\r\n\r\n  const selectMovieHandler = (id, type) => {\r\n    if (id === 'none') return;\r\n\r\n    let typeVal = displayType;\r\n    if (displayType === 'all') typeVal = type;\r\n\r\n    setSelectedMovie({ id, type: typeVal });\r\n  };\r\n\r\n  const closeDetailsHandler = () => setSelectedMovie(null);\r\n\r\n  useEffect(() => {\r\n    let type = displayType;\r\n    if (displayType === 'all') type = 'multi';\r\n\r\n    const timer = setTimeout(() => {\r\n      if (userInput.trim().length !== 0) {\r\n        const url = getAutocompleteUrl(type, userInput);\r\n\r\n        fetchData(url, (data) => {\r\n          if (data.results.length === 0) {\r\n            setAutocomplete([{ id: 'none', name: 'No match found' }]);\r\n          } else {\r\n            const autoObj = data.results.filter((result) => {\r\n              return result.media_type !== 'person';\r\n            });\r\n            setAutocomplete(autoObj.slice(0, 7));\r\n          }\r\n        });\r\n      } else {\r\n        setAutocomplete([]);\r\n        setIsLoading(false);\r\n      }\r\n    }, 350);\r\n\r\n    return () => clearTimeout(timer);\r\n  }, [userInput, displayType, fetchData, setIsLoading]);\r\n\r\n  useEffect(() => {\r\n    if (userInput.trim().length !== 0) setIsLoading(true);\r\n    else setIsLoading(false);\r\n  }, [userInput, setIsLoading]);\r\n\r\n  return (\r\n    <Fragment>\r\n      <input\r\n        className={classes.input}\r\n        type='text'\r\n        placeholder={placeholderText}\r\n        value={userInput}\r\n        onChange={inputChangeHandler}\r\n      />\r\n\r\n      {userInput.trim() !== '' && (\r\n        <div className={classes['auto-box']}>\r\n          {!isLoading &&\r\n            autocomplete.map((obj) => (\r\n              <span\r\n                key={`auto_${obj.id}`}\r\n                onClick={selectMovieHandler.bind(null, obj.id, obj.media_type)}\r\n              >\r\n                {obj.title ? obj.title : obj.name}\r\n              </span>\r\n            ))}\r\n          {isLoading && <span>Searching...</span>}\r\n        </div>\r\n      )}\r\n\r\n      {selectedMovie && (\r\n        <MovieDetails\r\n          id={selectedMovie.id}\r\n          type={selectedMovie.type}\r\n          onClose={closeDetailsHandler}\r\n        />\r\n      )}\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default SearchInput;\r\n","import { memo } from 'react';\r\nimport classes from './MainNavigation.module.css';\r\nimport SearchInput from './search-input/SearchInput';\r\n\r\nconst MainNavigation = ({ onChangeType, displayType }) => {\r\n  let mediaType = 'movie';\r\n  if (displayType === 'all') mediaType = '';\r\n  if (displayType === 'tv') mediaType = 'series';\r\n  const inputPlaceholder = `Search ${mediaType} by name`;\r\n\r\n  return (\r\n    <header className={classes['top-bar']}>\r\n      <div>\r\n        <h1>MoviesDB</h1>\r\n      </div>\r\n\r\n      <nav className={classes.nav}>\r\n        <ul>\r\n          <li\r\n            className={displayType === 'movie' ? classes.underline : ''}\r\n            onClick={onChangeType.bind(null, 'movie')}\r\n          >\r\n            Movies\r\n          </li>\r\n          <li\r\n            className={displayType === 'tv' ? classes.underline : ''}\r\n            onClick={onChangeType.bind(null, 'tv')}\r\n          >\r\n            Series\r\n          </li>\r\n          <li\r\n            className={displayType === 'all' ? classes.underline : ''}\r\n            onClick={onChangeType.bind(null, 'all')}\r\n          >\r\n            All\r\n          </li>\r\n        </ul>\r\n\r\n        <SearchInput\r\n          placeholderText={inputPlaceholder}\r\n          displayType={displayType}\r\n        />\r\n      </nav>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default memo(MainNavigation);\r\n","import { memo } from 'react';\r\nimport classes from './Movie.module.css';\r\n\r\nconst Movie = ({ data, onShowDetails }) => {\r\n  const selectDetailsHandler = () => {\r\n    let type;\r\n    if (data.media_type) type = data.media_type === 'movie' ? 'movie' : 'tv';\r\n    onShowDetails(data.id, type);\r\n  };\r\n\r\n\r\n  return (\r\n    <li className={classes['movie-item']} onClick={selectDetailsHandler}>\r\n      <img\r\n        src={`https://image.tmdb.org/t/p/w300/${data.poster_path}`}\r\n        alt={data.title}\r\n      />\r\n      <div>\r\n        <h2>{data.title ? data.title : data.name}</h2>\r\n      </div>\r\n      <span className={classes.btn}>\r\n        {data.vote_average * 10}\r\n        <span>%</span>\r\n      </span>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default memo(Movie);\r\n","export default __webpack_public_path__ + \"static/media/down-arrow.474a217e.svg\";","import { Fragment, memo, useState } from 'react';\r\nimport arrowIcon from '../../../assets/icons/down-arrow.svg';\r\nimport classes from './Filters.module.css';\r\n\r\nconst genresArr = [\r\n  { id: 'any', name: 'All' },\r\n  { id: '28', name: 'Action' },\r\n  { id: '35', name: 'Comedy' },\r\n  { id: '27', name: 'Horror' },\r\n  { id: '10749', name: 'Romance' },\r\n  { id: '9648', name: 'Mystery' },\r\n  { id: '878', name: 'Science Fiction' },\r\n  { id: '53', name: 'Thriller' },\r\n  { id: '18', name: 'Drama' },\r\n  { id: '99', name: 'Documentary' },\r\n  { id: '16', name: 'Animation' },\r\n];\r\n\r\nconst Filters = ({ selectedGenreId, onSearchGenre, displayType }) => {\r\n  const [showFilters, setShowFilters] = useState(false);\r\n\r\n  const toggleFiltersHandler = () => setShowFilters((prevState) => !prevState);\r\n\r\n  let genres = genresArr;\r\n  if (displayType === 'tv') {\r\n    genres = genres.filter((genre) => {\r\n      return (\r\n        genre.id !== '27' &&\r\n        genre.name !== 'Science Fiction' &&\r\n        genre.name !== 'Action'\r\n      );\r\n    });\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <div className={classes['show-genres']} onClick={toggleFiltersHandler}>\r\n        <img\r\n          src={arrowIcon}\r\n          alt='arrow-icon'\r\n          className={showFilters ? classes.rotate : ''}\r\n        />\r\n        <span>Search by genre</span>\r\n      </div>\r\n\r\n      {showFilters && (\r\n        <ul className={classes.filters}>\r\n          {genres.map((genre) => (\r\n            <li\r\n              className={selectedGenreId === genre.id ? classes.selected : ''}\r\n              key={genre.id}\r\n              onClick={onSearchGenre.bind(null, genre.id)}\r\n            >\r\n              {genre.name}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      )}\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default memo(Filters);\r\n","import { useCallback, useState } from 'react';\r\nimport MovieDetails from '../movie-details/MovieDetails';\r\nimport Movie from './Movie';\r\nimport classes from './MoviesList.module.css';\r\nimport LoadingSpinner from '../UI/LoadingSpinner';\r\nimport Filters from './filters/Filters';\r\n\r\nconst MoviesList = ({\r\n  moviesList,\r\n  onFetchMore,\r\n  displayType,\r\n  isFetching,\r\n  loading,\r\n  error,\r\n  genreId,\r\n  onSelectGenre,\r\n}) => {\r\n  const [selectedMovie, setSelectedMovie] = useState(null);\r\n\r\n  const showDetailsHandler = useCallback(\r\n    (id, type) => {\r\n      setSelectedMovie({ id, type: type ? type : displayType });\r\n    },\r\n    [displayType]\r\n  );\r\n  const closeDetailsHandler = () => setSelectedMovie(null);\r\n\r\n  const searchGenderHandler = useCallback((id) => {\r\n    onSelectGenre(id);\r\n  }, [onSelectGenre]);\r\n\r\n  return (\r\n    <section className={classes.section}>\r\n      {displayType !== 'all' && (\r\n        <Filters\r\n          onSearchGenre={searchGenderHandler}\r\n          selectedGenreId={genreId}\r\n          displayType={displayType}\r\n        />\r\n      )}\r\n\r\n      <h2>Trending this week</h2>\r\n\r\n      {loading && isFetching && <LoadingSpinner />}\r\n      {!isFetching && error && (\r\n        <p className={classes.msg}>\r\n          Something went wrong, please try again in a few moments\r\n        </p>\r\n      )}\r\n      {!loading && !error && (\r\n        <ul className={classes.list}>\r\n          {moviesList.map((movie) => (\r\n            <Movie\r\n              key={movie.id}\r\n              data={movie}\r\n              onShowDetails={showDetailsHandler}\r\n            />\r\n          ))}\r\n        </ul>\r\n      )}\r\n\r\n      {!loading && isFetching && <LoadingSpinner />}\r\n      {!isFetching && displayType !== 'all' && (\r\n        <button className={classes['load-btn']} onClick={onFetchMore}>\r\n          Load more movies\r\n        </button>\r\n      )}\r\n\r\n      {selectedMovie && (\r\n        <MovieDetails\r\n          id={selectedMovie.id}\r\n          type={selectedMovie.type}\r\n          onClose={closeDetailsHandler}\r\n        />\r\n      )}\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default MoviesList;\r\n","export default __webpack_public_path__ + \"static/media/main-background.9b7c41ba.jpg\";","import { Fragment, useCallback, useReducer } from 'react';\r\nimport { useEffect } from 'react';\r\nimport MainNavigation from './components/main-navigation/MainNavigation';\r\nimport MoviesList from './components/movies-list/MoviesList';\r\nimport mainBackground from './assets/images/main-background.jpg';\r\nimport { getMediaUrlByGenre, getTrendingUrl } from './api/api';\r\nimport useHttp from './hooks/useHttp';\r\n\r\nconst initialState = {\r\n  mediaElements: [],\r\n  nextPage: 1,\r\n  mediaType: 'movie',\r\n  genreId: 'any',\r\n  loading: true,\r\n};\r\n\r\nconst mediaReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case 'SELECT_TYPE':\r\n      return {\r\n        ...state,\r\n        mediaType: action.mediaType,\r\n        genreId: 'any',\r\n        loading: true,\r\n        nextPage: 1,\r\n      };\r\n\r\n    case 'SELECT_GENRE':\r\n      return { ...state, genreId: action.genreId, loading: true, nextPage: 1 };\r\n\r\n    case 'SET_MEDIA':\r\n      return {\r\n        ...state,\r\n        mediaElements: action.mediaElements,\r\n        loading: false,\r\n        nextPage: state.nextPage + 1,\r\n      };\r\n\r\n    case 'ADD_MEDIA':\r\n      return {\r\n        ...state,\r\n        mediaElements: [...state.mediaElements, ...action.mediaElements],\r\n        nextPage: state.nextPage + 1,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nfunction App() {\r\n  const { fetchData, isLoading: isFetching, error } = useHttp();\r\n  const [mediaState, dispatch] = useReducer(mediaReducer, initialState);\r\n\r\n  const { mediaType, mediaElements, nextPage, genreId, loading } = mediaState;\r\n\r\n  const selectTypeHandler = useCallback((mediaType) => {\r\n    if (mediaType === mediaState.mediaType) return;\r\n    dispatch({ type: 'SELECT_TYPE', mediaType });\r\n  }, [mediaState.mediaType]);\r\n  const selectGenreHandler = useCallback((genreId) => {\r\n    dispatch({ type: 'SELECT_GENRE', genreId });\r\n  }, []);\r\n  const setMediaElements = (mediaArray) => {\r\n    dispatch({ type: 'SET_MEDIA', mediaElements: mediaArray });\r\n  };\r\n  const addMediaElements = (mediaArray) => {\r\n    dispatch({ type: 'ADD_MEDIA', mediaElements: mediaArray });\r\n  };\r\n\r\n  const fetchMoviesHandler = useCallback(\r\n    (pageNum) => {\r\n      let url;\r\n      if (mediaType === 'all') url = getTrendingUrl(mediaType);\r\n      else\r\n        url = getMediaUrlByGenre(\r\n          mediaType,\r\n          genreId === 'any' ? null : genreId,\r\n          pageNum ? pageNum : null\r\n        );\r\n\r\n      fetchData(url, (data) => {\r\n        if (pageNum) addMediaElements(data.results);\r\n        else setMediaElements(data.results);\r\n      });\r\n    },\r\n    [mediaType, fetchData, genreId]\r\n  );\r\n\r\n  useEffect(() => {\r\n    fetchMoviesHandler();\r\n  }, [mediaType, genreId, fetchMoviesHandler]);\r\n\r\n  return (\r\n    <Fragment>\r\n      <img src={mainBackground} className='background' alt='background' />\r\n\r\n      <div className='container'>\r\n        <MainNavigation\r\n          onChangeType={selectTypeHandler}\r\n          displayType={mediaType}\r\n        />\r\n\r\n        <MoviesList\r\n          moviesList={mediaElements}\r\n          loading={loading}\r\n          isFetching={isFetching}\r\n          error={error}\r\n          genreId={genreId}\r\n          displayType={mediaType}\r\n          onFetchMore={fetchMoviesHandler.bind(null, nextPage)}\r\n          onSelectGenre={selectGenreHandler}\r\n        />\r\n      </div>\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}