{"version":3,"sources":["components/main-navigation/MainNavigation.module.css","components/movie-details/MovieDetails.module.css","components/movies-list/MoviesList.module.css","components/movies-list/filters/Filters.module.css","components/UI/Modal.module.css","components/main-navigation/search-input/SearchInput.module.css","components/movies-list/Movie.module.css","components/UI/LoadingSpinner.module.css","api/api.js","hooks/useHttp.js","components/UI/LoadingSpinner.js","components/UI/Modal.js","components/movie-details/MovieDetails.js","components/main-navigation/search-input/SearchInput.js","components/main-navigation/MainNavigation.js","components/movies-list/Movie.js","assets/icons/down-arrow.svg","components/movies-list/filters/Filters.js","components/movies-list/MoviesList.js","assets/images/main-background.jpg","App.js","index.js"],"names":["module","exports","config","useHttp","useState","isLoading","setIsLoading","error","setError","fetchData","useCallback","url","applyData","fetch","then","response","json","data","catch","err","LoadingSpinner","className","classes","loader","Backdrop","props","backdrop","onClick","ModalOverlay","modalClasses","modal","children","Modal","overlays","document","getElementById","createPortal","onClose","MovieDetails","id","type","setData","useEffect","getMediaUrl","message","msg","console","log","resolution","path","poster_path","title","name","tagline","overview","genres","release_date","production_companies","runtime","revenue","vote_average","first_air_date","number_of_seasons","number_of_episodes","src","width","alt","info","map","genre","company","SearchInput","displayType","placeholderText","userInput","setUserInput","autocomplete","setAutocomplete","selectedMovie","setSelectedMovie","selectMovieHandler","typeVal","timer","setTimeout","trim","length","input","getAutocompleteUrl","results","autoObj","filter","result","media_type","slice","clearTimeout","placeholder","value","onChange","event","target","obj","bind","MainNavigation","onChangeType","mediaType","inputPlaceholder","nav","underline","Movie","onShowDetails","btn","memo","Filters","selectedGenreId","onSearchGender","showFilters","setShowFilters","prevState","arrowIcon","rotate","filters","selected","genresArr","isInitial","MoviesList","moviesList","onFetchByGenre","currentFetchingPage","setCurrentFetchingPage","setSelectedGenreId","showMovieDetails","section","list","movie","App","movies","setMovies","setType","fetchMoviesHandler","genreId","pageNum","pagePath","getMediaUrlByGenre","getTrendingUrl","mainBackground","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.4e9a2609.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"top-bar\":\"MainNavigation_top-bar__33niE\",\"nav\":\"MainNavigation_nav__3NDoE\",\"underline\":\"MainNavigation_underline__dAYH8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"movie-container\":\"MovieDetails_movie-container__1JNRI\",\"info\":\"MovieDetails_info__G_UDI\",\"info-sections\":\"MovieDetails_info-sections__NB2Gh\",\"message\":\"MovieDetails_message__3NIMB\",\"msg\":\"MovieDetails_msg__jpLPp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"section\":\"MoviesList_section__1uIV3\",\"list\":\"MoviesList_list__2Jvt8\",\"load-btn\":\"MoviesList_load-btn__BfPzU\",\"msg\":\"MoviesList_msg__2n6jS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"show-genres\":\"Filters_show-genres__1XKdY\",\"rotate\":\"Filters_rotate__2J_5Y\",\"filters\":\"Filters_filters__3zsL-\",\"selected\":\"Filters_selected__35Maa\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"backdrop\":\"Modal_backdrop__1VYmU\",\"modal\":\"Modal_modal__1wNAK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"SearchInput_input__GRqrF\",\"auto-box\":\"SearchInput_auto-box__ro14I\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"movie-item\":\"Movie_movie-item__2KnKO\",\"btn\":\"Movie_btn__1q6Cd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loader\":\"LoadingSpinner_loader__3ER_Y\",\"load8\":\"LoadingSpinner_load8__35q7l\"};","export const config = {\r\n  url: 'https://api.themoviedb.org/3',\r\n  apiKey: '282f63039879e23307f585741fbb6e92',\r\n};\r\n\r\nexport const getImgUrl = (resolution, path) => {\r\n  return `https://image.tmdb.org/t/p/w${resolution}/${path}`;\r\n};\r\n\r\nexport const getTrendingUrl = (type) => {\r\n  const url = `${config.url}/trending/${type}/week?api_key=${config.apiKey}`;\r\n  return url;\r\n};\r\n\r\nexport const getMediaUrl = (type, id) => {\r\n  return `${config.url}/${type}/${id}?api_key=${config.apiKey}`;\r\n};\r\n\r\nexport const getAutocompleteUrl = (type, input) => {\r\n  return `${config.url}/search/${type}/?api_key=${config.apiKey}&query=${input}`;\r\n};\r\n\r\nexport const getMediaUrlByGenre = (type, genreId, pageNum) => {\r\n  const pagePath = pageNum ? `&page=${pageNum}` : '';\r\n  return `${config.url}/discover/${type}?api_key=${config.apiKey}&with_genres=${genreId}${pagePath}`;\r\n};\r\n","import { useCallback, useState } from 'react';\r\n\r\nconst useHttp = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  const fetchData = useCallback((url, applyData) => {\r\n    setIsLoading(true);\r\n    setError(null);\r\n\r\n    fetch(url)\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        setIsLoading(false);\r\n        applyData(data);\r\n      })\r\n      .catch((err) => {\r\n        setIsLoading(false);\r\n        setError(err);\r\n      });\r\n  }, []);\r\n\r\n  return {\r\n    fetchData,\r\n    isLoading,\r\n    error,\r\n    setIsLoading,\r\n  };\r\n};\r\n\r\nexport default useHttp;\r\n","import classes from './LoadingSpinner.module.css'\r\n\r\nconst LoadingSpinner = () => {\r\n  return <div className={classes.loader}></div>\r\n}\r\n\r\nexport default LoadingSpinner;","import { createPortal } from 'react-dom';\r\nimport { Fragment } from 'react/cjs/react.production.min';\r\nimport classes from './Modal.module.css';\r\n\r\nconst Backdrop = (props) => {\r\n  return <div className={classes.backdrop} onClick={props.onClick}></div>;\r\n};\r\n\r\nconst ModalOverlay = (props) => {\r\n  const modalClasses = `${classes.modal} ${\r\n    props.className ? props.className : ''\r\n  }`;\r\n\r\n  return <div className={modalClasses}>{props.children}</div>;\r\n};\r\n\r\nconst Modal = (props) => {\r\n  const overlays = document.getElementById('overlays');\r\n  return (\r\n    <Fragment>\r\n      {createPortal(<Backdrop onClick={props.onClose} />, overlays)}\r\n      {createPortal(\r\n        <ModalOverlay className={props.className}>\r\n          {props.children}\r\n        </ModalOverlay>,\r\n        overlays\r\n      )}\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Modal;\r\n","import { Fragment, useState, useEffect } from 'react';\r\nimport { getImgUrl, getMediaUrl } from '../../api/api';\r\nimport useHttp from '../../hooks/useHttp';\r\nimport LoadingSpinner from '../UI/LoadingSpinner';\r\nimport Modal from '../UI/Modal';\r\n\r\nimport classes from './MovieDetails.module.css';\r\n\r\nconst MovieDetails = ({ id, type, onClose }) => {\r\n  const { fetchData, isLoading, error } = useHttp();\r\n  const [data, setData] = useState(null);\r\n\r\n  useEffect(() => {\r\n    fetchData(getMediaUrl(type, id), (data) => {\r\n      setData(data);\r\n    });\r\n  }, [id, type, fetchData]);\r\n\r\n  if (!data || isLoading || error) {\r\n    return (\r\n      <Modal className={classes.message} onClose={onClose}>\r\n        {!error && <LoadingSpinner />}\r\n        {error && <p className={classes.msg}>Movie could not be found</p>}\r\n      </Modal>\r\n    );\r\n  }\r\n\r\n  console.log(data);\r\n\r\n  const {\r\n    poster_path,\r\n    title,\r\n    name,\r\n    tagline,\r\n    overview,\r\n    genres,\r\n    release_date,\r\n    production_companies,\r\n    runtime,\r\n    revenue,\r\n    vote_average,\r\n    first_air_date,\r\n    number_of_seasons,\r\n    number_of_episodes,\r\n  } = data;\r\n\r\n  return (\r\n    <Modal onClose={onClose} className={classes['movie-container']}>\r\n      <img\r\n        src={getImgUrl(500, poster_path)}\r\n        width='370px'\r\n        alt={title ? title : name}\r\n      />\r\n\r\n      <div className={classes.info}>\r\n        <h2>{title ? title : name}</h2>\r\n        <h3>{tagline}</h3>\r\n        <p>{overview}</p>\r\n\r\n        {genres && <span>{genres.map((genre) => genre.name + ' ')}</span>}\r\n        {production_companies && (\r\n          <span>\r\n            {production_companies.map((company) => company.name + ' ')}\r\n          </span>\r\n        )}\r\n\r\n        <div className={classes['info-sections']}>\r\n          <div>\r\n            {title ? 'Original Release' : 'First air date'}\r\n            <span>{title ? release_date : first_air_date}</span>\r\n          </div>\r\n\r\n          {title && (\r\n            <Fragment>\r\n              <div>\r\n                Running Time: <span>{runtime} minutes</span>\r\n              </div>\r\n              <div>\r\n                Box Office: $<span>{revenue === 0 ? '--' : revenue}</span>\r\n              </div>\r\n            </Fragment>\r\n          )}\r\n          {name && (\r\n            <Fragment>\r\n              <div>\r\n                Number of seasons: <span>{number_of_seasons}</span>\r\n              </div>\r\n              <div>\r\n                Number of episodes: <span>{number_of_episodes}</span>\r\n              </div>\r\n            </Fragment>\r\n          )}\r\n\r\n          <div>\r\n            Vote average: <span>{vote_average}</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default MovieDetails;\r\n","import { Fragment, useEffect, useState } from 'react';\r\nimport { getAutocompleteUrl } from '../../../api/api';\r\nimport useHttp from '../../../hooks/useHttp';\r\nimport MovieDetails from '../../movie-details/MovieDetails';\r\nimport classes from './SearchInput.module.css';\r\n\r\nconst SearchInput = ({ displayType, placeholderText }) => {\r\n  const { fetchData, isLoading, setIsLoading } = useHttp();\r\n\r\n  const [userInput, setUserInput] = useState('');\r\n  const [autocomplete, setAutocomplete] = useState([]);\r\n  const [selectedMovie, setSelectedMovie] = useState(null);\r\n\r\n  const inputChangeHandler = (event) => setUserInput(event.target.value);\r\n\r\n  const selectMovieHandler = (id, type) => {\r\n    if (id === 'none') return;\r\n\r\n    let typeVal = displayType;\r\n    if (displayType === 'all') typeVal = type;\r\n\r\n    setSelectedMovie({ id, type: typeVal });\r\n  };\r\n\r\n  const closeDetailsHandler = () => setSelectedMovie(null);\r\n\r\n  useEffect(() => {\r\n    let type = displayType;\r\n    if (displayType === 'all') type = 'multi';\r\n\r\n    const timer = setTimeout(() => {\r\n      if (userInput.trim().length !== 0) {\r\n        const url = getAutocompleteUrl(type, userInput);\r\n\r\n        fetchData(url, (data) => {\r\n          if (data.results.length === 0) {\r\n            setAutocomplete([{ id: 'none', name: 'No match found' }]);\r\n          } else {\r\n            const autoObj = data.results.filter((result) => {\r\n              return result.media_type !== 'person';\r\n            });\r\n            setAutocomplete(autoObj.slice(0, 7));\r\n          }\r\n        });\r\n      } else {\r\n        setAutocomplete([]);\r\n        setIsLoading(false);\r\n      }\r\n    }, 350);\r\n\r\n    return () => clearTimeout(timer);\r\n  }, [userInput, displayType, fetchData, setIsLoading]);\r\n\r\n  useEffect(() => {\r\n    if (userInput.trim().length !== 0) setIsLoading(true);\r\n    else setIsLoading(false);\r\n  }, [userInput, setIsLoading]);\r\n\r\n  return (\r\n    <Fragment>\r\n      <input\r\n        className={classes.input}\r\n        type='text'\r\n        placeholder={placeholderText}\r\n        value={userInput}\r\n        onChange={inputChangeHandler}\r\n      />\r\n\r\n      {userInput.trim() !== '' && (\r\n        <div className={classes['auto-box']}>\r\n          {!isLoading &&\r\n            autocomplete.map((obj) => (\r\n              <span\r\n                key={`auto_${obj.id}`}\r\n                onClick={selectMovieHandler.bind(null, obj.id, obj.type)}\r\n              >\r\n                {obj.title ? obj.title : obj.name}\r\n              </span>\r\n            ))}\r\n          {isLoading && <span>Searching...</span>}\r\n        </div>\r\n      )}\r\n\r\n      {selectedMovie && (\r\n        <MovieDetails\r\n          id={selectedMovie.id}\r\n          type={selectedMovie.type}\r\n          onClose={closeDetailsHandler}\r\n        />\r\n      )}\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default SearchInput;\r\n","import classes from './MainNavigation.module.css';\r\nimport SearchInput from './search-input/SearchInput';\r\n\r\nconst MainNavigation = ({ onChangeType, displayType }) => {\r\n  let mediaType = 'movie';\r\n  if (displayType === 'all') mediaType = '';\r\n  if (displayType === 'tv') mediaType = 'series';\r\n  const inputPlaceholder = `Search ${mediaType} by name`;\r\n\r\n  return (\r\n    <header className={classes['top-bar']}>\r\n      <div>\r\n        <h1>MoviesDB</h1>\r\n      </div>\r\n\r\n      <nav className={classes.nav}>\r\n        <ul>\r\n          <li\r\n            className={displayType === 'movie' ? classes.underline : ''}\r\n            onClick={onChangeType.bind(null, 'movie')}\r\n          >\r\n            Movies\r\n          </li>\r\n          <li\r\n            className={displayType === 'tv' ? classes.underline : ''}\r\n            onClick={onChangeType.bind(null, 'tv')}\r\n          >\r\n            Series\r\n          </li>\r\n          <li\r\n            className={displayType === 'all' ? classes.underline : ''}\r\n            onClick={onChangeType.bind(null, 'all')}\r\n          >\r\n            All\r\n          </li>\r\n        </ul>\r\n\r\n        <SearchInput\r\n          placeholderText={inputPlaceholder}\r\n          displayType={displayType}\r\n        />\r\n      </nav>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default MainNavigation;\r\n","import { memo } from 'react';\r\nimport classes from './Movie.module.css';\r\n\r\nconst Movie = ({ data, onShowDetails }) => {\r\n  const selectDetailsHandler = () => {\r\n    let type;\r\n    if (data.media_type) type = data.media_type === 'movie' ? 'movie' : 'tv';\r\n    onShowDetails(data.id, type);\r\n  };\r\n\r\n\r\n  return (\r\n    <li className={classes['movie-item']} onClick={selectDetailsHandler}>\r\n      <img\r\n        src={`https://image.tmdb.org/t/p/w300/${data.poster_path}`}\r\n        alt={data.title}\r\n      />\r\n      <div>\r\n        <h2>{data.title ? data.title : data.name}</h2>\r\n      </div>\r\n      <span className={classes.btn}>\r\n        {data.vote_average * 10}\r\n        <span>%</span>\r\n      </span>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default memo(Movie);\r\n","export default __webpack_public_path__ + \"static/media/down-arrow.474a217e.svg\";","import { Fragment, useState } from 'react';\r\nimport arrowIcon from '../../../assets/icons/down-arrow.svg';\r\nimport classes from './Filters.module.css';\r\n\r\nconst Filters = ({ genres, selectedGenreId, onSearchGender }) => {\r\n  const [showFilters, setShowFilters] = useState(false);\r\n\r\n  const toggleFiltersHandler = () => setShowFilters((prevState) => !prevState);\r\n\r\n  return (\r\n    <Fragment>\r\n      <div className={classes['show-genres']} onClick={toggleFiltersHandler}>\r\n        <img\r\n          src={arrowIcon}\r\n          alt='arrow-icon'\r\n          className={showFilters ? classes.rotate : ''}\r\n        />\r\n        <span>Search by genre</span>\r\n      </div>\r\n\r\n      {showFilters && (\r\n        <ul className={classes.filters}>\r\n          {genres.map((genre) => (\r\n            <li\r\n              className={selectedGenreId === genre.id ? classes.selected : ''}\r\n              key={genre.id}\r\n              onClick={onSearchGender.bind(null, genre.id)}\r\n            >\r\n              {genre.name}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      )}\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Filters;\r\n","import { useCallback, useState, useEffect } from 'react';\r\nimport MovieDetails from '../movie-details/MovieDetails';\r\nimport Movie from './Movie';\r\nimport classes from './MoviesList.module.css';\r\nimport LoadingSpinner from '../UI/LoadingSpinner';\r\nimport Filters from './filters/Filters';\r\n\r\nconst genresArr = [\r\n  { id: 0, name: 'All' },\r\n  { id: '28', name: 'Action' },\r\n  { id: '35', name: 'Comedy' },\r\n  { id: '27', name: 'Horror' },\r\n  { id: '10749', name: 'Romance' },\r\n  { id: '9648', name: 'Mystery' },\r\n  { id: '878', name: 'Science Fiction' },\r\n  { id: '53', name: 'Thriller' },\r\n  { id: '18', name: 'Drama' },\r\n  { id: '99', name: 'Documentary' },\r\n  { id: '16', name: 'Animation' },\r\n];\r\n\r\nlet isInitial = true;\r\n\r\nconst MoviesList = ({\r\n  moviesList,\r\n  onFetchByGenre,\r\n  displayType,\r\n  isLoading,\r\n  error,\r\n}) => {\r\n  const [currentFetchingPage, setCurrentFetchingPage] = useState(1);\r\n\r\n  const [selectedGenreId, setSelectedGenreId] = useState(0);\r\n  const [selectedMovie, setSelectedMovie] = useState(null);\r\n\r\n  const showMovieDetails = useCallback(\r\n    (id, type) => {\r\n      setSelectedMovie({ id, type: type ? type : displayType });\r\n    },\r\n    [displayType]\r\n  );\r\n\r\n  const closeDetailsHandler = () => setSelectedMovie(null);\r\n\r\n  const searchGenderHandler = (id) => {\r\n    setSelectedGenreId(id);\r\n    onFetchByGenre(id === 0 ? null : id);\r\n  };\r\n\r\n  const fetchMoreMovies = () => {\r\n    setCurrentFetchingPage((prevState) => prevState + 1);\r\n    onFetchByGenre(selectedGenreId, currentFetchingPage + 1);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (isInitial) {\r\n      isInitial = false;\r\n      return;\r\n    }\r\n\r\n    setCurrentFetchingPage(1);\r\n  }, [displayType, selectedGenreId]);\r\n\r\n  useEffect(() => setSelectedGenreId(0), [displayType]);\r\n\r\n  let genres = genresArr;\r\n  if (displayType === 'tv') {\r\n    genres = genres.filter((genre) => {\r\n      return (\r\n        genre.id !== '27' &&\r\n        genre.name !== 'Science Fiction' &&\r\n        genre.name !== 'Action'\r\n      );\r\n    });\r\n  }\r\n\r\n  return (\r\n    <section className={classes.section}>\r\n      {displayType !== 'all' && <Filters\r\n        genres={genres}\r\n        onSearchGender={searchGenderHandler}\r\n        selectedGenreId={selectedGenreId}\r\n      />}\r\n\r\n      <h2>Trending this week</h2>\r\n\r\n      {isLoading && moviesList.length === 0 && <LoadingSpinner />}\r\n      {error && (\r\n        <p className={classes.msg}>\r\n          Something went wrong, please try again in a few moments\r\n        </p>\r\n      )}\r\n      {moviesList.length > 0 && !error && (\r\n        <ul className={classes.list}>\r\n          {moviesList.map((movie) => (\r\n            <Movie\r\n              key={movie.id}\r\n              data={movie}\r\n              onShowDetails={showMovieDetails}\r\n            />\r\n          ))}\r\n        </ul>\r\n      )}\r\n\r\n      {isLoading && moviesList.length > 0 && <LoadingSpinner />}\r\n      {displayType !== 'all' && selectedGenreId !== 0 && (\r\n        <button className={classes['load-btn']} onClick={fetchMoreMovies}>\r\n          Load more movies\r\n        </button>\r\n      )}\r\n\r\n      {selectedMovie && (\r\n        <MovieDetails\r\n          id={selectedMovie.id}\r\n          type={selectedMovie.type}\r\n          onClose={closeDetailsHandler}\r\n        />\r\n      )}\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default MoviesList;\r\n","export default __webpack_public_path__ + \"static/media/main-background.9b7c41ba.jpg\";","import { Fragment, useCallback } from 'react';\nimport { useEffect, useState } from 'react';\nimport MainNavigation from './components/main-navigation/MainNavigation';\nimport MoviesList from './components/movies-list/MoviesList';\nimport mainBackground from './assets/images/main-background.jpg';\nimport { getMediaUrlByGenre, getTrendingUrl } from './api/api';\nimport useHttp from './hooks/useHttp';\n\nfunction App() {\n  const { fetchData, isLoading, error } = useHttp();\n  const [movies, setMovies] = useState([]);\n  const [type, setType] = useState('movie');\n\n  const fetchMoviesHandler = useCallback(\n    (genreId, pageNum) => {\n      let url;\n      if (genreId) {\n        url = getMediaUrlByGenre(type, genreId, pageNum);\n      } else url = getTrendingUrl(type);\n\n      fetchData(url, (data) => {\n        if (pageNum) {\n          setMovies((prevState) => [...prevState, ...data.results]);\n        } else setMovies(data.results);\n      });\n    },\n    [type, fetchData]\n  );\n\n  useEffect(() => {\n    fetchMoviesHandler();\n  }, [type, fetchMoviesHandler]);\n\n  return (\n    <Fragment>\n      <img src={mainBackground} className='background' alt='background' />\n\n      <div className='container'>\n        <MainNavigation onChangeType={setType} displayType={type} />\n        <MoviesList\n          moviesList={movies}\n          isLoading={isLoading}\n          error={error}\n          onFetchByGenre={fetchMoviesHandler}\n          displayType={type}\n        />\n      </div>\n    </Fragment>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}